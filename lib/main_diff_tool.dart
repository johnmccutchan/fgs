/// A Flutter app that compares and approves golden file changes.
///
/// ## State management
///
/// The diff tool is a stateful app that maintains a list of golden file pairs,
/// and whether or not they have been approved or rejected (i.e. skipped). It
/// uses a [DiffToolService] to load the golden file pairs, and make changes to
/// the golden files on disk.
library;

import 'dart:async';
import 'dart:io' as io;
import 'dart:ui' as ui;

import 'package:fgs/golden_approval.dart';
import 'package:fgs/diff.dart';
import 'package:flutter/material.dart';
import 'package:path/path.dart' as p;
import 'package:image/image.dart' as img;

/// The entry point for the diff tool.
///
/// To run:
/// ```shell
/// flutter run -d macos -t lib/main_diff_tool.dart -a "<path-to-goldens>" -a "<path-to-last-run>"
/// ```
///
/// To see an example/demo:
/// ```shell
/// flutter run -d macos -t lib/main_diff_tool.dart -a "test/fixtures/goldens" -a "test/fixtures/goldens_example_run"
/// ```
void main(List<String> args) {
  // If this is running on a desktop, use the local diff tool service.
  final DiffToolService service;

  if (args.length != 2) {
    runApp(const MaterialApp(
        home: Scaffold(
            body: Center(
                child: Text(
                    'Usage: diff_tool <path-to-goldens> <path-to-last-run>')))));
    return;
  }

  final goldenPath = args[0].trim();
  final lastRunPath = args[1].trim();

  // Assert both paths exist.
  if (!io.Directory(goldenPath).existsSync()) {
    runApp(MaterialApp(
        home: Scaffold(
            body: Center(
                child: Text(
      'Path "$goldenPath" (${p.absolute(goldenPath)}) does not exist.',
    )))));
    return;
  }

  if (!io.Directory(lastRunPath).existsSync()) {
    runApp(MaterialApp(
        home: Scaffold(
            body: Center(
                child: Text(
                    'Path "$lastRunPath" (${p.absolute(lastRunPath)}) does not exist.')))));
    return;
  }

  runApp(DiffToolApp(
    goldenPath: goldenPath,
    lastRunPath: lastRunPath,
  ));
}

final class DiffToolApp extends StatelessWidget {
  /// The path to the golden directory, i.e. checked into source control.
  final String goldenPath;

  /// The path to the last run directory, i.e. generated by the last test run.
  final String lastRunPath;

  const DiffToolApp({
    required this.goldenPath,
    required this.lastRunPath,
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Diff Tool',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Diff Tool'),
        ),
        body: _DiffToolPage(
          goldenPath: goldenPath,
          lastRunPath: lastRunPath,
          // TODO(john): Replace with a real diff function.
          diffImage: _DiffToolPage._diffPlaceholder,
        ),
      ),
    );
  }
}

final class _DiffToolPage extends StatefulWidget {
  /// A default implementation of [diffImage].
  ///
  /// Returns image a with a red overlay.
  static Widget _diffPlaceholder(Image a, Image b) {
    return a;
  }

  final String goldenPath;
  final String lastRunPath;
  final Widget Function(Image a, Image b) diffImage;

  const _DiffToolPage({
    required this.goldenPath,
    required this.lastRunPath,
    this.diffImage = _diffPlaceholder,
  });

  @override
  State<_DiffToolPage> createState() => _DiffToolPageState();
}

final class Diff {
  final ui.Image image;
  final double percentDifferent;
  Diff(this.image, this.percentDifferent);
}

Future<ui.Image> convertToUiImage(img.Image image) async {
  ui.ImmutableBuffer buffer =
      await ui.ImmutableBuffer.fromUint8List(image.toUint8List());

  ui.ImageDescriptor id = ui.ImageDescriptor.raw(buffer,
      height: image.height,
      width: image.width,
      pixelFormat: ui.PixelFormat.rgba8888);

  ui.Codec codec = await id.instantiateCodec(
      targetHeight: image.height, targetWidth: image.width);

  ui.FrameInfo fi = await codec.getNextFrame();
  ui.Image uiImage = fi.image;

  return uiImage;
}

final class _DiffToolPageState extends State<_DiffToolPage> {
  List<GoldenFilePair>? _pairs;
  List<Diff> _diffs = [];
  final Completer _loaded = new Completer();
  int _index = 0;
  String? _error;

  @override
  void initState() {
    super.initState();

    // Load golden file pairs.
    findGoldenPairs(widget.goldenPath, widget.lastRunPath).then((pairs) async {
      _pairs = pairs;
      for (final pair in pairs) {
        final cmd = img.Command();
        cmd.decodeImageFile(pair.canonicalPath);
        img.Image? golden = await cmd.getImage();
        cmd.decodeImageFile(pair.updatedPath);
        img.Image? test = await cmd.getImage();
        try {
          ImageDiffResult diffResult = diffImage(golden, test);
          ui.Image uiDiffImage = await convertToUiImage(diffResult.diff);
          _diffs.add(Diff(uiDiffImage, diffResult.percentDifferent));
        } catch (e) {
          print(e);
        }
      }
      _loaded.complete();
      setState(() {});
    }).catchError((e) {
      setState(() {
        _error = e.toString();
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
        future: _loaded.future,
        builder: (BuildContext context, AsyncSnapshot snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.connectionState == ConnectionState.done) {
            // If there was an error, show it.
            if (_error != null) {
              return Center(
                child: Text(_error!),
              );
            }

            // If there are no pairs, we're done.
            if (_pairs!.isEmpty) {
              return const Center(
                child: Text('No golden file pairs found.'),
              );
            }

            // If we've reached the end of the pairs, we're done.
            if (_index >= _pairs!.length) {
              return const Center(
                child: Text('All golden file pairs approved or skipped.'),
              );
            }

            // Return a UI that shows three panes:
            // 1. The golden image
            // 2. The test image
            // 3. The diff image
            //
            // There is also a button to approve or skip the diff.
            final pair = _pairs![_index];
            final diff = _diffs[_index];
            return Column(
              children: [
                Expanded(
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      Expanded(
                        child: Column(
                          children: [
                            const Text('Golden'),
                            Expanded(
                              child: Image.file(io.File(pair.canonicalPath)),
                            ),
                          ],
                        ),
                      ),
                      Expanded(
                        child: Column(
                          children: [
                            const Text('Diff'),
                            Expanded(child: RawImage(image: diff.image)),
                          ],
                        ),
                      ),
                      Expanded(
                        child: Column(
                          children: [
                            const Text('Test'),
                            Expanded(
                              child: Image.file(io.File(pair.updatedPath)),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
                Row(
                  children: [
                    Expanded(
                      child: TextButton(
                        child: const Text('Approve'),
                        onPressed: () {
                          // Copy the updated file to the canonical file.
                          io.File(pair.updatedPath)
                              .copySync(pair.canonicalPath);
                          setState(() {
                            _index++;
                          });
                        },
                      ),
                    ),
                    Expanded(
                      child: TextButton(
                        child: const Text('Skip'),
                        onPressed: () {
                          setState(() {
                            _index++;
                          });
                        },
                      ),
                    ),
                  ],
                ),
              ],
            );
          } else {
            throw StateError(
                'Unsupported snapshot state: ${snapshot.connectionState}');
          }
        });
  }
}

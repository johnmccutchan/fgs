import 'dart:convert';
import 'dart:typed_data';
import 'dart:ui' as ui;
import 'dart:async';
import 'package:fgs/golden_approval.dart';
import 'package:flutter/material.dart';
import 'package:path/path.dart' as p;
import 'package:image/image.dart' as img;
import 'package:fgs/diff.dart';
import 'package:http/http.dart' as http;


void main(List<String> args) {
  runApp(DiffToolApp());
}

final class DiffToolApp extends StatelessWidget {
  /// The path to the golden directory, i.e. checked into source control.
  // final String goldenPath;

  // /// The path to the last run directory, i.e. generated by the last test run.
  // final String lastRunPath;

  const DiffToolApp({
    // required this.goldenPath,
    // required this.lastRunPath,
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Diff Tool',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Diff Tool'),
        ),
        body: _DiffToolPage(
          // TODO(john): Replace with a real diff function.
          diffImage: _DiffToolPage._diffPlaceholder,
        ),
      ),
    );
  }
}

final class _DiffToolPage extends StatefulWidget {
  /// A default implementation of [diffImage].
  ///
  /// Returns image a with a red overlay.
  static Widget _diffPlaceholder(Image a, Image b) {
    return a;
  }

  final Widget Function(Image a, Image b) diffImage;

  const _DiffToolPage({
    this.diffImage = _diffPlaceholder,
  });

  @override
  State<_DiffToolPage> createState() => _DiffToolPageState();
}

final class Diff {
  final ui.Image image;
  final double percentDifferent;
  Diff(this.image, this.percentDifferent);
}

Future<ui.Image> convertToUiImage(img.Image image) async {
  ui.ImmutableBuffer buffer =
      await ui.ImmutableBuffer.fromUint8List(image.toUint8List());

  ui.ImageDescriptor id = ui.ImageDescriptor.raw(buffer,
      height: image.height,
      width: image.width,
      pixelFormat: ui.PixelFormat.rgba8888);

  ui.Codec codec = await id.instantiateCodec(
      targetHeight: image.height, targetWidth: image.width);

  ui.FrameInfo fi = await codec.getNextFrame();
  ui.Image uiImage = fi.image;

  return uiImage;
}

final class _DiffToolPageState extends State<_DiffToolPage> {
  static const String clientPort = String.fromEnvironment('fgs.serverPort');
  List<(String state, String key, ui.Image image)> images = [];

  @override
  void initState() {
    super.initState();

    var client = http.Client();
    var pending = <Future<http.Response>>[];
    var configs = <Map<String, Object>>[];
    client.get(Uri.parse('http://localhost:${clientPort}/list-images')).then((response) async {
      var keys = ((json.decode(response.body)! as Map<String, Object?>)['keys'] as List<Object?>).cast<String>();
      for (var key in keys) {
        for (var state in ['before', 'after']) {
          var requestBody = {
            'key': key,
            'state': state,
          };
          pending.add(client.post(Uri.parse('http://localhost:${clientPort}/image'), body: json.encode(requestBody)));
          configs.add(requestBody);
        }
      }
      var responses = await Future.wait(pending);
      for (var i = 0; i < responses.length; i++) {
        // Note: using package:image is only necessary if you want to diff the
        // pixels on the client.
        ui.Image uiImage;
        try {
          img.Image? image = img.decodePng(responses[i].bodyBytes);
          if (image == null) {
            continue;
          }
          var completer = Completer<ui.Image>();
          ui.decodeImageFromPixels(image!.buffer.asUint8List(), image.width, image.height, ui.PixelFormat.rgba8888, (result) {
            completer.complete(result);
          });
          uiImage = await completer.future;
        } catch (err) {
          print(err);
          continue;
        }
        images.add((
          configs[i]['key'] as String,
          configs[i]['state'] as String,
          uiImage
        ));
      }
      setState(() {
        //
      });
    });
  }


  @override
  Widget build(BuildContext context) {
    return ListView(children: [
      for (var image in images)
        Row(children: [
          Text(image.$1 + image.$2),
          RawImage(image: image.$3, width: 200, height: 200)
        ])
    ]);
  }
}

import 'dart:convert';
import 'dart:typed_data';
import 'dart:ui' as ui;
import 'dart:async';
import 'package:fgs/golden_approval.dart';
import 'package:flutter/material.dart';
import 'package:path/path.dart' as p;
import 'package:image/image.dart' as img;
import 'package:fgs/diff.dart';
import 'package:http/http.dart' as http;


void main(List<String> args) {
  runApp(DiffToolApp());
}

final class DiffToolApp extends StatelessWidget {
  /// The path to the golden directory, i.e. checked into source control.
  // final String goldenPath;

  // /// The path to the last run directory, i.e. generated by the last test run.
  // final String lastRunPath;

  const DiffToolApp({
    // required this.goldenPath,
    // required this.lastRunPath,
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Diff Tool',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Diff Tool'),
        ),
        body: _DiffToolPage(
          // TODO(john): Replace with a real diff function.
          diffImage: _DiffToolPage._diffPlaceholder,
        ),
      ),
    );
  }
}

final class _DiffToolPage extends StatefulWidget {
  /// A default implementation of [diffImage].
  ///
  /// Returns image a with a red overlay.
  static Widget _diffPlaceholder(Image a, Image b) {
    return a;
  }

  final Widget Function(Image a, Image b) diffImage;

  const _DiffToolPage({
    this.diffImage = _diffPlaceholder,
  });

  @override
  State<_DiffToolPage> createState() => _DiffToolPageState();
}

final class Diff {
  final ui.Image image;
  final double percentDifferent;
  Diff(this.image, this.percentDifferent);
}

Future<ui.Image> convertToUiImage(img.Image image) async {
  ui.ImmutableBuffer buffer =
      await ui.ImmutableBuffer.fromUint8List(image.toUint8List());

  ui.ImageDescriptor id = ui.ImageDescriptor.raw(buffer,
      height: image.height,
      width: image.width,
      pixelFormat: ui.PixelFormat.rgba8888);

  ui.Codec codec = await id.instantiateCodec(
      targetHeight: image.height, targetWidth: image.width);

  ui.FrameInfo fi = await codec.getNextFrame();
  ui.Image uiImage = fi.image;

  return uiImage;
}

final class _DiffToolPageState extends State<_DiffToolPage> {
  List<GoldenFilePair>? _pairs;
  List<Diff> _diffs = [];
  final Completer _loaded = Completer();
  int _index = 0;
  String? _error;
  static const String clientPort = String.fromEnvironment('fgs.serverPort');
  List<(String state, String key, ui.Image image)> images = [];

  @override
  void initState() {
    super.initState();

    var client = http.Client();
    var pending = <Future<http.Response>>[];
    var configs = <Map<String, Object>>[];
    client.get(Uri.parse('http://localhost:${clientPort}/list-images')).then((response) async {
      var keys = ((json.decode(response.body)! as Map<String, Object?>)['keys'] as List<Object?>).cast<String>();
      for (var key in keys) {
        for (var state in ['before', 'after']) {
          var requestBody = {
            'key': key,
            'state': state,
          };
          pending.add(client.post(Uri.parse('http://localhost:${clientPort}/image'), body: json.encode(requestBody)));
          configs.add(requestBody);
        }
      }
      var responses = await Future.wait(pending);
      for (var i = 0; i < responses.length; i++) {
        var completer = Completer<ui.Image>();
        ui.decodeImageFromList(responses[i].bodyBytes, (ui.Image result) {
          completer.complete(result);
        });
        images.add((
          configs[i]['key'] as String,
          configs[i]['state'] as String,
          await completer.future,
        ));
      }
      setState(() {

      });
    });



    // Load golden file pairs.
    // findGoldenPairs(widget.goldenPath, widget.lastRunPath).then((pairs) async {
    //   _pairs = pairs;
    //   for (final pair in pairs) {
    //     final cmd = img.Command();
    //     cmd.decodeImageFile(pair.canonical.path);
    //     img.Image? golden = await cmd.getImage();
    //     cmd.decodeImageFile(pair.updated.path);
    //     img.Image? test = await cmd.getImage();
    //     try {
    //       ImageDiffResult diffResult = diffImage(golden, test);
    //       ui.Image uiDiffImage = await convertToUiImage(diffResult.diff);
    //       _diffs.add(Diff(uiDiffImage, diffResult.percentDifferent));
    //     } catch (e) {
    //       print(e);
    //     }
    //   }
    //   _loaded.complete();
    //   setState(() {});
    // }).catchError((e) {
    //   setState(() {
    //     _error = e.toString();
    //   });
    // });
  }


  @override
  Widget build(BuildContext context) {
    return ListView(children: [
      for (var image in images)
        Row(children: [
          Text(image.$1 + image.$2),
          RawImage(image: image.$3, width: 200, height: 200)
        ])
    ]);
    // return FutureBuilder(
    //     future: _loaded.future,
    //     builder: (BuildContext context, AsyncSnapshot snapshot) {
    //       if (snapshot.connectionState == ConnectionState.waiting) {
    //         return const Center(child: CircularProgressIndicator());
    //       } else if (snapshot.connectionState == ConnectionState.done) {
    //         // If there was an error, show it.
    //         if (_error != null) {
    //           return Center(
    //             child: Text(_error!),
    //           );
    //         }

    //         // If there are no pairs, we're done.
    //         if (_pairs!.isEmpty) {
    //           return const Center(
    //             child: Text('No golden file pairs found.'),
    //           );
    //         }

    //         // If we've reached the end of the pairs, we're done.
    //         if (_index >= _pairs!.length) {
    //           return const Center(
    //             child: Text('All golden file pairs approved or skipped.'),
    //           );
    //         }

    //         // Return a UI that shows three panes:
    //         // 1. The golden image
    //         // 2. The test image
    //         // 3. The diff image
    //         //
    //         // There is also a button to approve or skip the diff.
    //         final pair = _pairs![_index];
    //         final diff = _diffs[_index];
    //         return Column(
    //           children: [
    //             Expanded(
    //               child: Row(
    //                 mainAxisAlignment: MainAxisAlignment.spaceEvenly,
    //                 crossAxisAlignment: CrossAxisAlignment.stretch,
    //                 children: [
    //                   Expanded(
    //                     child: Column(
    //                       children: [
    //                         const Text('Golden'),
    //                         Expanded(
    //                           child: Image.file(pair.canonical),
    //                         ),
    //                       ],
    //                     ),
    //                   ),
    //                   Expanded(
    //                     child: Column(
    //                       children: [
    //                         const Text('Diff'),
    //                         Expanded(child: RawImage(image: diff.image)),
    //                       ],
    //                     ),
    //                   ),
    //                   Expanded(
    //                     child: Column(
    //                       children: [
    //                         const Text('Test'),
    //                         Expanded(
    //                           child: Image.file(pair.updated),
    //                         ),
    //                       ],
    //                     ),
    //                   ),
    //                 ],
    //               ),
    //             ),
    //             Row(
    //               children: [
    //                 Expanded(
    //                   child: TextButton(
    //                     child: const Text('Approve'),
    //                     onPressed: () {
    //                       // Copy the updated file to the canonical file.
    //                       pair.updated.copySync(pair.canonical.path);
    //                       setState(() {
    //                         _index++;
    //                       });
    //                     },
    //                   ),
    //                 ),
    //                 Expanded(
    //                   child: TextButton(
    //                     child: const Text('Skip'),
    //                     onPressed: () {
    //                       setState(() {
    //                         _index++;
    //                       });
    //                     },
    //                   ),
    //                 ),
    //               ],
    //             ),
    //           ],
    //         );
    //       } else {
    //         throw StateError(
    //             'Unsupported snapshot state: ${snapshot.connectionState}');
    //       }
    //     });
  }
}
